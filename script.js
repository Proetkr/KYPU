// === –û–Ω–æ–≤–ª–µ–Ω–∏–π —Å–∫—Ä–∏–ø—Ç –≥—Ä–∏ ===
// –†–µ–∂–∏–º –∑ —Ç–∞–π–º–µ—Ä–æ–º, –∞–Ω—ñ–º–∞—Ü—ñ—î—é –≤–∏–±—É—Ö—ñ–≤, –∑–≤—É–∫–æ–º, —Ä—É–π–Ω—É–≤–∞–Ω–Ω—è–º –æ–±'—î–∫—Ç—ñ–≤ —Ç–∞ –æ–±–º–µ–∂–µ–Ω–Ω—è–º –ü–ü–û

// --- –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –∫–∞—Ä—Ç–∏ ---
const map = L.map('map').setView([49.0, 31.0], 6);
L.tileLayer('https://{s}.basemaps.cartocdn.com/dark_all/{z}/{x}/{y}{r}.png', {
  attribution: '&copy; OpenStreetMap'
}).addTo(map);

const droneFlyingSound = new Audio('assets/sounds/drone-flying.mp3'); // –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ —Ä–æ–∑—à–∏—Ä–µ–Ω–Ω—è —Ñ–∞–π–ª—É (.mp3, .wav —Ç–æ—â–æ)
droneFlyingSound.loop = true; // –®–∞—Ö–µ–¥ –±—É–¥–µ –ø–æ—Å—Ç—ñ–π–Ω–æ –¥–∑–∏–∂—á–∞—Ç–∏, –ø–æ–∫–∏ –Ω–µ –±—É–¥–µ –∑–Ω–∏—â–µ–Ω–∏–π
const explosionSound = new Audio('assets/sounds/explosion.mp3');
const hitSound = new Audio('assets/sounds/hit.mp3'); // –ó–≤—É–∫ –≤–ª—É—á–∞–Ω–Ω—è –ø–æ –æ–±'—î–∫—Ç—É
const missileLaunchSound = new Audio('assets/sounds/missile-launch.mp3'); // –ó–≤—É–∫ –∑–∞–ø—É—Å–∫—É —Ä–∞–∫–µ—Ç–∏ (–ü–ü–û)
const targetAcquiredSound = new Audio('assets/sounds/target-acquired.mp3'); // –ó–≤—É–∫ –∑–∞—Ö–æ–ø–ª–µ–Ω–Ω—è —Ü—ñ–ª—ñ
const alarmSound = new Audio('assets/sounds/alarm.mp3'); // –ó–≤—É–∫ —Ç—Ä–∏–≤–æ–≥–∏ –¥–ª—è –±–∞–ª—ñ—Å—Ç–∏–∫–∏/–∫–∏–Ω–∂–∞–ª–∞ (–ø—Ä–∏–ø—É—Å—Ç–∏–º–æ, —â–æ alarm.mp3)
const fighterTakeoffSound = new Audio('assets/sounds/fighter-takeoff.mp3'); // –ó–≤—É–∫ –≤–∑–ª—å–æ—Ç—É –≤–∏–Ω–∏—â—É–≤–∞—á–∞ (–ø—Ä–∏–ø—É—Å—Ç–∏–º–æ, —â–æ fighter-takeoff.mp3)
const radioActive = new Audio('assets/sounds/radio_tu.mp3'); // –∑–≤—É–∫—Ç—É—à–æ–∫ radio
const raketaSound = new Audio('assets/sounds/raketaSound.mp3');
const impactSound = new Audio('assets/sounds/–ø—Ä–∏–ª—ë—Ç.mp3'); // --- –ó–≤—É–∫ –ø—Ä–∏–ª—å–æ—Ç—É –ø–æ –æ–±'—î–∫—Ç—É ---



// --- –ú–æ–Ω–µ—Ç–∏ —Ç–∞ UI ---
let coins = 10000;
let intercepted = 0; // –¶–µ –≤–∂–µ —î, –∞–ª–µ –æ–Ω–æ–≤–∏–º–æ UI –¥–ª—è –Ω—å–æ–≥–æ

// --- –ü–ü–û –ø–µ—Ä–µ–∑–∞—Ä—è–¥–∫–∞ ---
const pvoCooldowns = new Map();

// --- –°–ø–µ—Ü–∏—Ñ—ñ–∫–∞—Ü—ñ—ó –ü–ü–û (–±–∞–∑–æ–≤—ñ –∑–Ω–∞—á–µ–Ω–Ω—è) ---
const pvoSpecs = {
  mobile: { type: 'mobile', radius: 37000, cooldown: 800, max: 10, cost: 135, targetType: 'shahed' }, // –ó–±—ñ–ª—å—à–µ–Ω–æ —Ä–∞–¥—ñ—É—Å –º–æ–±—ñ–ª—å–Ω–æ—ó –≥—Ä—É–ø–∏ –≤ 3 —Ä–∞–∑–∏
  gunner: { type: 'mobile', radius: 43000, cooldown: 500, max: 10, cost: 200, targetType: 'shahed' }, // –ó–±—ñ–ª—å—à–µ–Ω–æ —Ä–∞–¥—ñ—É—Å –∫—É–ª–µ–º–µ—Ç–Ω–∏–∫–∞ –≤ 3 —Ä–∞–∑–∏
  gepard: { type: 'mobile', radius: 58000, cooldown: 600, max: 11, cost: 650, targetType: 'shahed' }, // NEW: Gepard
  'drone-interceptor': { type: 'mobile', radius: 55000, cooldown: 1000, max: 3, cost: 900, targetType: 'shahed' }, // NEW: Drone Interceptor
  s100: { type: 'rocket', radius: 45000, cooldown: 1250, max: 4, cost: 400, targetType: 'missile' },
  patriot: { type: 'rocket', radius: 90000, cooldown: 1000, max: 3, cost: 2000, targetType: 'missile' },
  s300: { type: 'rocket', radius: 65000, cooldown: 750, max: 3, cost: 1000, targetType: 'missile' },
  thaad: { type: 'rocket', radius: 100000, cooldown: 500, max: 3, cost: 3000, targetType: 'missile' },
  // === UPDATED: Increased cooldown for SAMP/T and IRIS-T ===
  'samp-t': { type: 'rocket', radius: 80000, cooldown: 1500, max: 3, cost: 950, targetType: 'missile' }, // Increased from 900 to 1500
  'iris-t': { type: 'rocket', radius: 40000, cooldown: 1200, max: 4, cost: 888, targetType: 'missile' }, // Increased from 700 to 1200
  // === NEW: REB ===
  'reb': { type: 'reb', radius: 70000, cooldown: 0, max: 5, cost: 1250, targetType: 'shahed', isJammer: true }
};

// --- –†—ñ–≤–Ω—ñ –ø—Ä–æ–∫–∞—á–∫–∏ –ü–ü–û (—Ç–µ–ø–µ—Ä –¥–ª—è –∫–æ–∂–Ω–æ–≥–æ —Ç–∏–ø—É –æ–∫—Ä–µ–º–æ) ---
let upgradeLevels = {};
for (const type in pvoSpecs) {
    upgradeLevels[type] = { radius: 0, efficiency: 0 };
}

// --- –ó–º—ñ–Ω–Ω–∞ –¥–ª—è –≤—ñ–¥—Å—Ç–µ–∂–µ–Ω–Ω—è —Ä–µ–∂–∏–º—É –ø–æ–∫—Ä–∞—â–µ–Ω–Ω—è ---
let upgradeInProgress = null; // –ó–±–µ—Ä—ñ–≥–∞—î 'radius' –∞–±–æ 'efficiency'

function updateGameUI() {
  let coinEl = document.getElementById('coinDisplay');
  let interceptedEl = document.getElementById('interceptedDisplay');
  let waveEl = document.getElementById('waveDisplay');

  // Ensure elements exist before updating, as they are now in a separate div
  if (!coinEl) {
    console.error("coinDisplay element not found!");
    return;
  }
  if (!interceptedEl) {
    console.error("interceptedDisplay element not found!");
    return;
  }
  if (!waveEl) {
    console.error("waveDisplay element not found!");
    return;
  }

  coinEl.innerHTML = `–ú–æ–Ω–µ—Ç–∏: <b>${coins}</b>`;
  interceptedEl.innerHTML = `–ü–µ—Ä–µ—Ö–æ–ø–ª–µ–Ω–æ: <b>${intercepted}</b>`;
  waveEl.innerHTML = `–•–≤–∏–ª—è: <b>${stats.wave}</b>`;
}

function rewardCoin(amount = 5) {
  coins += amount;
  updateGameUI();
}

// --- –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –∞–Ω—ñ–º–∞—Ü—ñ—ó –ø–æ–ª—å–æ—Ç—É –∑ –æ–±–µ—Ä—Ç–∞–Ω–Ω—è–º —Ç–∞ —à—É–º–æ–º ---
function flyWithRotation(marker, start, end, duration, onEnd) {
  let t = 0;
  const steps = duration / 20;
  const interval = setInterval(() => {
    t++;
    if (t >= steps) {
      clearInterval(interval);
      if (onEnd) onEnd();
      return;
    }
    const progressLinear = t / steps;
    const progress = progressLinear * progressLinear * (3 - 2 * progressLinear); // easeInOut
    const lat = start.lat + (end.lat - start.lat) * progress;
    const lng = start.lng + (end.lng - start.lng) * progress;
    const current = L.latLng(lat, lng);
    marker.setLatLng(current);

    const angle = Math.atan2(end.lat - lat, end.lng - lng) * 180 / Math.PI;
    const el = marker.getElement();
    if (el) {
      const img = el.querySelector('img');
      if (img) {
        img.style.transition = 'transform 0.1s linear';
        img.style.transform = `rotate(${angle + 90}deg)`;
      }
    }
  }, 20);
}

// --- –¢–∞–π–º–µ—Ä –¥–æ –Ω–∞—Å—Ç—É–ø–Ω–æ—ó —Ö–≤–∏–ª—ñ ---
let countdown = 25; // –ó–º—ñ–Ω–µ–Ω–æ –Ω–∞ 25 —Å–µ–∫—É–Ω–¥
const waveTimerEl = document.getElementById('waveTimerDisplay'); // Get by ID
function updateWaveTimer() {
  // Ensure element exists before updating
  if (!waveTimerEl) {
    console.error("waveTimerDisplay element not found!");
    return;
  }
  waveTimerEl.innerHTML = `–ù–∞—Å—Ç—É–ø–Ω–∞ —Ö–≤–∏–ª—è —á–µ—Ä–µ–∑: <b>${countdown}</b> —Å–µ–∫.`;
}
setInterval(() => {
  if (countdown > 0) {
    countdown--;
    updateWaveTimer();
  }
}, 1000);

// --- –ö–Ω–æ–ø–∫–∞ —Ä–µ–º–æ–Ω—Ç—É ---
const repairBtn = document.getElementById('repairBtn'); // Get by ID
repairBtn.onclick = () => {
  targets.forEach(t => {
    // –¢–µ–ø–µ—Ä —Ä–µ–º–æ–Ω—Ç –≤—Ä–∞—Ö–æ–≤—É—î maxHp –∫–æ–∂–Ω–æ–≥–æ –æ–±'—î–∫—Ç–∞
    if (t.hp < t.maxHp && coins >= 10) {
      t.hp = Math.min(t.maxHp, t.hp + 1); // –í—ñ–¥–Ω–æ–≤–ª—é—î–º–æ 1 HP, –∞–ª–µ –Ω–µ –±—ñ–ª—å—à–µ maxHp
      coins -= 10;
      updateGameUI();
      // –Ø–∫—â–æ –æ–±'—î–∫—Ç –±—É–≤ –∑–Ω–∏—â–µ–Ω–∏–π —ñ –≤—ñ–¥–Ω–æ–≤–∏–≤ HP, –∑–Ω–æ–≤—É –¥–æ–¥–∞—î–º–æ –π–æ–≥–æ –º–∞—Ä–∫–µ—Ä
      if (t.destroyed && t.hp > 0) {
        t.destroyed = false;
        t.marker = L.marker([t.lat, t.lon]).addTo(map).bindPopup(`${t.name} (HP: ${t.hp}/${t.maxHp})`);
      } else if (t.marker && map.hasLayer(t.marker)) {
        t.marker.setPopupContent(`${t.name} (HP: ${t.hp}/${t.maxHp})`);
      }
    }
  });
};

let factories = [];

// Moved this interval outside of any click handlers to run once globally
setInterval(() => {
  factories.forEach(f => {
    if (!f.destroyed) {
      f.missileCount++;
      f.marker.setPopupContent(`üöÄ –†–∞–∫–µ—Ç–Ω–∏–π –∑–∞–≤–æ–¥ (HP: ${f.hp}/20, –†–∞–∫–µ—Ç: ${f.missileCount})`);
    }
  });
}, 15 * 60 * 1000); // –∫–æ–∂–Ω—ñ 15 —Ö–≤–∏–ª–∏–Ω


const factoryBtn = document.getElementById('factoryBtn'); // Get by ID
factoryBtn.onclick = () => {
  if (factories.length >= 2) { // Fixed placement of this check
    alert("–ú–∞–∫—Å–∏–º—É–º 2 –∑–∞–≤–æ–¥–∏!");
    return;
  }
  if (coins < 50) {
    alert("–ù–µ–¥–æ—Å—Ç–∞—Ç–Ω—å–æ –º–æ–Ω–µ—Ç");
    return;
  }

  coins -= 50;
  updateGameUI();
  map.once('click', (e) => {
    const marker = L.marker(e.latlng, {
      icon: L.divIcon({
        html: '<img src="https://i.ibb.co/wNwgkGXR/image.png" style="width:40px; height:40px;">',
        className: ''
      })
    }).addTo(map).bindPopup("–†–∞–∫–µ—Ç–Ω–∏–π –∑–∞–≤–æ–¥");

    const factoryTarget = {
      lat: e.latlng.lat,
      lon: e.latlng.lng,
      name: 'üöÄ –†–∞–∫–µ—Ç–Ω–∏–π –∑–∞–≤–æ–¥',
      destroyed: false,
      hp: 20,
      isFactory: true,
      marker
    };
    factories.push({
      ...factoryTarget,
      latlng: e.latlng,
      missileCount: 0
    });
    targets.push(factoryTarget);
  });
};

const ourMissiles = [
  { name: '–í–∞–∂–∫–∏–π –ë–ø–õ–ê', iconUrl: 'https://i.ibb.co/VcVzzbcH/image.png', size: [28, 28], anchor: [14, 14] },
  { name: '–ë–ø–õ–ê "–õ—é—Ç–∏–π"', iconUrl: 'https://i.ibb.co/DHc3MwJs/image.png', size: [35, 35], anchor: [17, 17] },
  { name: '–ö—Ä–∏–ª–∞—Ç–∞ —Ä–∞–∫–µ—Ç–∞ "SCALP"', iconUrl: 'https://i.ibb.co/ksWjRm1G/image.png', size: [32, 32], anchor: [16, 16] }
];

const fireBtn = document.getElementById('fireBtn'); // Get by ID
fireBtn.onclick = () => {
  if (factories.length === 0) {
    alert("–ù–µ–º–∞—î –∑–∞–≤–æ–¥—ñ–≤!");
    return;
  }

  // === –ó–ú–Ü–ù–ê: –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞ –º–æ–Ω–µ—Ç–∏ –¥–ª—è –∑–∞–ø—É—Å–∫—É —Ä–∞–∫–µ—Ç–∏ –∑ –∑–∞–≤–æ–¥—É ===
  const MISSILE_COST = 850;
  if (coins < MISSILE_COST) {
    alert(`–ù–µ–¥–æ—Å—Ç–∞—Ç–Ω—å–æ –º–æ–Ω–µ—Ç! –ü–æ—Ç—Ä—ñ–±–Ω–æ ${MISSILE_COST} –º–æ–Ω–µ—Ç –¥–ª—è –∑–∞–ø—É—Å–∫—É —Ä–∞–∫–µ—Ç–∏.`);
    return;
  }

  coins -= MISSILE_COST; // –ó–Ω—ñ–º–∞—î–º–æ –º–æ–Ω–µ—Ç–∏
  updateGameUI(); // –û–Ω–æ–≤–ª—é—î–º–æ UI

  // –í–∏–ø–∞–¥–∫–æ–≤–∏–π –≤–∏–±—ñ—Ä –≤–æ—Ä–æ–∂–æ—ó —Ü—ñ–ª—ñ
  const targetData = enemyTargets[Math.floor(Math.random() * enemyTargets.length)];
  const target = L.latLng(targetData.lat, targetData.lon);

  // –í–∏–ø–∞–¥–∫–æ–≤–∏–π –≤–∏–±—ñ—Ä —Ä–∞–∫–µ—Ç–∏ –∑ –Ω–∞—à–æ–≥–æ –∞—Ä—Å–µ–Ω–∞–ª—É
  const selectedMissile = ourMissiles[Math.floor(Math.random() * ourMissiles.length)];

  alert(`üî• –£–¥–∞—Ä –ø–æ: ${targetData.name} –∑–∞—Å–æ–±–æ–º "${selectedMissile.name}"!`);
  raketaSound.play(); // –í—ñ–¥—Ç–≤–æ—Ä—é—î–º–æ –∑–≤—É–∫ –∑–∞–ø—É—Å–∫—É —Ä–∞–∫–µ—Ç–∏

  const factory = factories[Math.floor(Math.random() * factories.length)];
  const start = factory.latlng;

  const missile = L.marker(start, {
    icon: L.icon({
      iconUrl: selectedMissile.iconUrl,
      iconSize: selectedMissile.size,
      iconAnchor: selectedMissile.anchor
    })
  }).addTo(map);

  let t = 0;
  const steps = 1000; // –¢—Ä–∏–≤–∞–ª—ñ—Å—Ç—å –ø–æ–ª—å–æ—Ç—É
  const interval = setInterval(() => {
    t++;
    if (t >= steps) {
      clearInterval(interval);
      map.removeLayer(missile);
      alert(`üî• –ó–∞—Å—ñ–¥ —É—Ä–∞–∂–µ–Ω–Ω—è "${selectedMissile.name}" –≤–ª—É—á–∏–≤ –ø–æ –≤–æ—Ä–æ–≥—É: ${targetData.name}!`);
      showExplosionAnimation(target);
      explosionSound.play(); // –î–æ–¥–∞—î–º–æ –∑–≤—É–∫ –≤–∏–±—É—Ö—É –ø—Ä–∏ –≤–ª—É—á–∞–Ω–Ω—ñ –ø–æ –≤–æ—Ä–æ–≥—É
      return;
    }

    const lat = start.lat + (target.lat - start.lat) * (t / steps);
    const lng = start.lng + (target.lng - start.lng) * (t / steps);
    missile.setLatLng([lat, lng]);

    // –î–æ–¥–∞—î–º–æ –ø–æ–≤–æ—Ä–æ—Ç —Ä–∞–∫–µ—Ç–∏ –ø—ñ–¥ —á–∞—Å –ø–æ–ª—å–æ—Ç—É (—è–∫ –¥–ª—è —à–∞—Ö–µ–¥—ñ–≤)
    const angle = Math.atan2(target.lat - lat, target.lng - lng) * 180 / Math.PI;
    const el = missile.getElement();
    if (el) {
      const img = el.querySelector('img');
      if (img) {
        img.style.transition = 'transform 0.1s linear';
        img.style.transform = `rotate(${angle + 90}deg)`;
      }
    }

  }, 10);
};

// --- –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ç–∞ Game Over ---
let stats = { wave: 0, destroyed: 0, intercepted: 0 }; // intercepted –≤–∂–µ —î
function checkGameOver() {
  const alive = targets.filter(t => !t.destroyed && !t.isFactory); // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —Ç—ñ–ª—å–∫–∏ –Ω–µ-–∑–∞–≤–æ–¥–∏
  if (alive.length === 0) {
    alert(`–ì—Ä—É –∑–∞–≤–µ—Ä—à–µ–Ω–æ\n–ó–Ω–∏—â–µ–Ω–æ —Ü—ñ–ª–µ–π: ${stats.destroyed}\n–ü–µ—Ä–µ—Ö–æ–ø–ª–µ–Ω–æ: ${stats.intercepted}`);
    location.reload();
  }
}


// --- –Ü–∫–æ–Ω–∫–∏ ---

const icons = {
  kinzhal: L.icon({
    iconUrl: 'https://i.ibb.co/Qv4zg1w7/kinzhal.png',
    iconSize: [50, 50],
    iconAnchor: [15, 15]
  }),
  ballistic: L.icon({
    iconUrl: 'https://i.ibb.co/0yDDYgqq/3214231432443243244.png',
    iconSize: [30, 30],
    iconAnchor: [15, 15]
  }),
  patriot: L.icon({ iconUrl: 'https://i.ibb.co/pBnQSZhB/54675444754-3.png', iconSize: [50, 50], iconAnchor: [20, 20] }),
  mobile: L.icon({ iconUrl: 'https://i.ibb.co/qM0D0sf3/mobile.png', iconSize: [35, 35], iconAnchor: [17, 17] }),
  gunner: L.icon({ iconUrl: 'https://i.ibb.co/qM0D0sf3/mobile.png', iconSize: [30, 30], iconAnchor: [15, 15] }),
  s300: L.icon({ iconUrl: 'https://i.ibb.co/3mYKkP95/300.png', iconSize: [50, 50], iconAnchor: [19, 19] }),
  s100: L.icon({ iconUrl: 'https://i.ibb.co/C304d57H/s100.png', iconSize: [70, 35], iconAnchor: [35, 17] }),
  thaad: L.icon({ iconUrl: 'https://i.ibb.co/pjDKHZ27/thaad2.png', iconSize: [70, 45], iconAnchor: [35, 22] }),
  gepard: L.icon({ iconUrl: 'https://i.ibb.co/wrFNjq6f/gep.png', iconSize: [40, 40], iconAnchor: [20, 20] }), // NEW: Gepard Icon
  'drone-interceptor': L.icon({ iconUrl: 'https://i.ibb.co/LXvxrLX2/image.png', iconSize: [40, 40], iconAnchor: [20, 20] }), // NEW: Drone Interceptor Icon
  // === UPDATED: SAMP/T and IRIS-T Icons (no changes here, just for context) ===
  'samp-t': L.icon({ iconUrl: 'https://i.ibb.co/rRs2P8RJ/samp-shzhim.png', iconSize: [90, 45], iconAnchor: [45, 22] }), // Replace with actual SAMP/T icon
  'iris-t': L.icon({ iconUrl: 'https://i.ibb.co/bj38tZkX/iris.png', iconSize: [60, 30], iconAnchor: [30, 15] }), // Replace with actual IRIS-T icon
  // === NEW: REB Icon ===
  'reb': L.icon({ iconUrl: 'https://i.ibb.co/nqpCJxSs/image.png', iconSize: [60, 60], iconAnchor: [30, 30] }), // Replace with actual REB icon

  shahed: L.divIcon({
    html: '<img src="https://i.ibb.co/Ngvpr1KD/32-4.png" style="width:30px; height:30px; transform-origin: center;">', // Removed hardcoded initial rotation
    iconSize: [35, 35],
    className: ''
  }),
  fighter: L.divIcon({ // –ù–æ–≤–∞ —ñ–∫–æ–Ω–∫–∞ –¥–ª—è –≤–∏–Ω–∏—â—É–≤–∞—á–∞ (–≤–∏–ø–∞–¥–∫–æ–≤–∞ —ñ–∫–æ–Ω–∫–∞ –ª—ñ—Ç–∞–∫–∞)
    html: '<img src="https://i.ibb.co/LdfkVp3f/ty.png" style="width:50px; height:50px; transform-origin: center;">',
    iconSize: [50, 50],
    className: ''
  }),
  fighter_missile: L.icon({ // –Ü–∫–æ–Ω–∫–∞ –¥–ª—è —Ä–∞–∫–µ—Ç –≤–∏–Ω–∏—â—É–≤–∞—á–∞
    iconUrl: 'https://i.ibb.co/Tp2TVpB/image.png', // –ú–æ–∂–Ω–∞ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞—Ç–∏ —Ç—É –∂, —â–æ –π –¥–ª—è X-101
    iconSize: [25, 25],
    iconAnchor: [12, 12]
  })
};

// --- –í—ñ–π—Å—å–∫–æ–≤—ñ –æ–±'—î–∫—Ç–∏ ---
const enemyTargets = [
  { lat: 54.2149, lon: 34.3572, name: '–∞–µ—Ä–æ–¥—Ä–æ–º "–®–∞–π–∫–æ–≤–∫–∞"' },
  { lat: 55.4245, lon: 42.3027, name: '–∞–µ—Ä–æ–¥—Ä–æ–º "–°–∞–≤–∞—Å–ª–µ–π–∫–∞"' },
  { lat: 51.4739, lon: 46.1930, name: '–∞–µ—Ä–æ–¥—Ä–æ–º "–ï–Ω–≥–µ–ª—å—Å-2"' },
  { lat: 48.9545, lon: 40.2954, name: '–∞–µ—Ä–æ–¥—Ä–æ–º "–ú—ñ–ª–ª—î—Ä–æ–≤–æ"' },
  { lat: 48.3079, lon: 46.2017, name: '–∞–µ—Ä–æ–¥—Ä–æ–º "–ê—Ö—Ç—É–±—ñ–Ω—Å—å–∫"' },
];


const targets = [
  { lat: 50.345, lon: 30.890, name: '–ë–æ—Ä–∏—Å–ø—ñ–ª—å—Å—å–∫–∏–π –∞–µ—Ä–æ–ø–æ—Ä—Ç', type: 'military_airport', hp: 7, maxHp: 7, destroyed: false },
  { lat: 50.160, lon: 30.290, name: '–í—ñ–π—Å—å–∫–æ–≤–∞ —á–∞—Å—Ç–∏–Ω–∞ "–í–∞—Å–∏–ª—å–∫—ñ–≤"', type: 'military_base', hp: 7, maxHp: 7, destroyed: false },
  { lat: 50.375, lon: 30.560, name: '–ö–∏—ó–≤—Å—å–∫–∞ –¢–ï–¶-5', type: 'power_plant', hp: 10, maxHp: 10, destroyed: false },
  { lat: 51.365, lon: 25.930, name: '–†—ñ–≤–Ω–µ–Ω—Å—å–∫–∞ –ê–ï–°', type: 'power_plant', hp: 12, maxHp: 12, destroyed: false },
  { lat: 49.444, lon: 32.060, name: '–í—ñ–π—Å—å–∫–æ–≤–∞ —á–∞—Å—Ç–∏–Ω–∞ "–ß–µ—Ä–∫–∞—Å–∏"', type: 'military_base', hp: 7, maxHp: 7, destroyed: false },
  { lat: 50.483, lon: 30.600, name: '–ì–µ–Ω–µ—Ä–∞–ª—å–Ω–∏–π —à—Ç–∞–± (–ö–∏—ó–≤)', type: 'command_center', hp: 15, maxHp: 15, destroyed: false },
  { lat: 47.850, lon: 35.170, name: '–î–Ω—ñ–ø—Ä–æ–ì–ï–° (–ó–∞–ø–æ—Ä—ñ–∂–∂—è)', type: 'critical_infra', hp: 10, maxHp: 10, destroyed: false },
  { lat: 48.625, lon: 22.300, name: '–ú—É–∑–µ–π –Ω–∞—Ä–æ–¥–Ω–æ—ó –∞—Ä—Ö—ñ—Ç–µ–∫—Ç—É—Ä–∏ —Ç–∞ –ø–æ–±—É—Ç—É (–£–∂–≥–æ—Ä–æ–¥)', type: 'cultural', hp: 3, maxHp: 3, destroyed: false },
  { lat: 49.553, lon: 25.600, name: '–¢–µ—Ä–Ω–æ–ø—ñ–ª—å—Å—å–∫–∏–π –∑–∞–ª—ñ–∑–Ω–∏—á–Ω–∏–π –≤—É–∑–æ–ª', type: 'railway_hub', hp: 8, maxHp: 8, destroyed: false },
  { lat: 50.937, lon: 26.060, name: '–°–∫–ª–∞–¥ –ø–∞–ª–∏–≤–∞ (–†—ñ–≤–Ω–µ)', type: 'fuel_depot', hp: 6, maxHp: 6, destroyed: false },
  { lat: 46.47, lon: 30.73, name: '–ü–æ—Ä—Ç "–û–¥–µ—Å–∞"', type: 'port', hp: 10, maxHp: 10, destroyed: false, generatesBonus: true, bonusType: 'coins', bonusAmount: 25 }
];

// --- –ú–∞—Ä–∫–µ—Ä–∏ –≤—ñ–π—Å—å–∫–æ–≤–∏—Ö –æ–±'—î–∫—Ç—ñ–≤ ---
targets.forEach(t => {
  t.marker = L.marker([t.lat, t.lon]).addTo(map).bindPopup(`${t.name} (HP: ${t.hp}/${t.maxHp})`);
});

// --- –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –±–æ–Ω—É—Å—ñ–≤ –≤—ñ–¥ –æ–±'—î–∫—Ç—ñ–≤ (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, –ü–æ—Ä—Ç –û–¥–µ—Å–∏) ---
setInterval(() => {
  targets.forEach(t => {
    if (t.generatesBonus && !t.destroyed && t.bonusType === 'coins') {
      rewardCoin(t.bonusAmount);
      console.log(`–û—Ç—Ä–∏–º–∞–Ω–æ ${t.bonusAmount} –º–æ–Ω–µ—Ç –≤—ñ–¥ ${t.name}!`);
    }
  });
}, 30000); // –ö–æ–∂–Ω—ñ 30 —Å–µ–∫—É–Ω–¥

// --- –ü—ñ—Å–ª—è –ø—Ä–∏–±—É—Ç—Ç—è —à–∞—Ö–µ–¥–∞ ---
function handleShahedHit(target) {
  target.hp--;
  showExplosionAnimation([target.lat, target.lon]); // –ê–Ω—ñ–º–∞—Ü—ñ—è –≤–∏–±—É—Ö—É –ø—Ä–∏ –≤–ª—É—á–∞–Ω–Ω—ñ –≤ —Ü—ñ–ª—å

  if (target.marker && map.hasLayer(target.marker)) {
    target.marker.setPopupContent(`${t.name} (HP: ${t.hp}/${t.maxHp})`);
  }

  if (target.hp <= 0 && !target.destroyed) {
    target.destroyed = true;
    map.removeLayer(target.marker);
    impactSound.play();
    stats.destroyed++;
    checkGameOver();
  }
}


// --- –ö–Ω–æ–ø–∫–∞ —Å—Ç–∞—Ä—Ç—É ---

const startBtn = document.getElementById('startBtn'); // Get by ID
startBtn.onclick = () => {
  
  
  alert('‚ö†Ô∏è –ü–æ—á–∞—Ç–æ–∫ —Ö–≤–∏–ª—ñ –∞—Ç–∞–∫!');
  let wave = 1;
  function nextWave() {
    stats.wave++;
    updateGameUI(); // –û–Ω–æ–≤–ª—é—î–º–æ UI –¥–ª—è –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è –ø–æ—Ç–æ—á–Ω–æ—ó —Ö–≤–∏–ª—ñ

    if (stats.wave === 5) { // === –ù–û–í–ê –ó–ú–Ü–ù–ê: –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –Ω–∞ 5 —Ö–≤–∏–ª—ñ ===
      showLaunchMessage("–ê–∫—Ç–∏–≤–Ω–∞ –±–æ–π–æ–≤–∞ —á–∞—Å—Ç–æ—Ç–∞ 4389 kHz. –Ü—Å–Ω—É—î –π–º–æ–≤—ñ—Ä–Ω—ñ—Å—Ç—å –≤–∏–ª—å–æ—Ç—É –±–æ–º–±–∞—Ä–¥—É–≤–∞–ª—å–Ω–∏–∫—ñ–≤.", true); // Pass true to show image
      radioActive.play();
    }

    spawnShahedWave(15 + stats.wave); // –ó–º—ñ–Ω–µ–Ω–æ –∫—ñ–ª—å–∫—ñ—Å—Ç—å —à–∞—Ö–µ–¥—ñ–≤ –Ω–∞–∑–∞–¥ –Ω–∞ "—Ç—Ä–æ—à–∫–∏ –±—ñ–ª—å—à–µ"
    // if (stats.wave % 2 === 0) spawnMissileWave('x101', 1); // Removed x101 missile spawn
    if (stats.wave % 3 === 0) spawnMissileWave('kinzhal', 3); // –ó–∞–ø—É—Å–∫–∞—î–º–æ 3 "–ö–∏–Ω–∂–∞–ª–∞"
    if (stats.wave % 4 === 0) spawnMissileWave('ballistic', 1);

    // –†–∞–Ω–¥–æ–º–Ω–∏–π –∑–∞–ø—É—Å–∫ –≤–∏–Ω–∏—â—É–≤–∞—á—ñ–≤
    // –¢–µ–ø–µ—Ä –∞–≤—ñ–∞—Ü—ñ—è –≤–∑–ª—ñ—Ç–∞—î –∫–æ–∂–Ω—ñ 6 —Ö–≤–∏–ª—å
    if (stats.wave > 0 && stats.wave % 6 === 0) {
      launchRandomFighters(4); // –ó–∞–ø—É—Å–∫–∞—î–º–æ 3 –≤–∏–Ω–∏—â—É–≤–∞—á—ñ
    }

    setTimeout(nextWave, 25000); // –Ü–Ω—Ç–µ—Ä–≤–∞–ª —Ö–≤–∏–ª—ñ 25 —Å–µ–∫—É–Ω–¥
  }
  nextWave();
};

// --- –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏, —á–∏ —Ç–æ—á–∫–∞ –∑–Ω–∞—Ö–æ–¥–∏—Ç—å—Å—è –≤ –º–µ–∂–∞—Ö –ø–æ–ª—ñ–≥–æ–Ω—É (–£–∫—Ä–∞—ó–Ω–∏) ---
// –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î –∞–ª–≥–æ—Ä–∏—Ç–º Ray Casting
function isInsidePolygon(point, polygon) {
  let x = point.lng, y = point.lat;
  let inside = false;
  for (let i = 0, j = polygon.length - 1; i < polygon.length; j = i++) {
    let xi = polygon[i][1], yi = polygon[i][0];
    let xj = polygon[j][1], yj = polygon[j][0];

    let intersect = ((yi > y) != (yj > y)) &&
      (x < (xj - xi) * (y - yi) / (yj - yi) + xi);
    if (intersect) inside = !inside;
  }
  return inside;
}

// –ü—Ä–∏–±–ª–∏–∑–Ω—ñ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∏ –ø–æ–ª—ñ–≥–æ–Ω—É, —â–æ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è—î —Ç–µ—Ä–∏—Ç–æ—Ä—ñ—é –£–∫—Ä–∞—ó–Ω–∏
// –¶—ñ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∏ —î —Å–ø—Ä–æ—â–µ–Ω–∏–º–∏ —ñ –Ω–µ —î —Ç–æ—á–Ω–∏–º–∏ –∫–æ—Ä–¥–æ–Ω–∞–º–∏
const ukrainePolygonCoords = [
  [52.3, 34.3], // –ü—ñ–≤–Ω—ñ—á–Ω–∏–π –°—Ö—ñ–¥
  [50.5, 40.2], // –°—Ö—ñ–¥ (–î–æ–Ω–±–∞—Å)
  [46.5, 37.0], // –ü—ñ–≤–¥–µ–Ω–Ω–∏–π –°—Ö—ñ–¥ (–ê–∑–æ–≤—Å—å–∫–µ –º–æ—Ä–µ)
  [44.5, 33.5], // –ö—Ä–∏–º (–ø—ñ–≤–¥–µ–Ω–Ω–∏–π –∫—Ä–∞–π)
  [45.3, 28.5], // –ü—ñ–≤–¥–µ–Ω–Ω–∏–π –ó–∞—Ö—ñ–¥ (–û–¥–µ—â–∏–Ω–∞)
  [49.0, 22.0], // –ó–∞—Ö—ñ–¥ (–õ—å–≤—ñ–≤—â–∏–Ω–∞)
  [51.7, 23.5], // –ü—ñ–≤–Ω—ñ—á–Ω–∏–π –ó–∞—Ö—ñ–¥ (–í–æ–ª–∏–Ω—å)
  [52.3, 34.3]  // –ó–∞–º–∏–∫–∞–Ω–Ω—è –ø–æ–ª—ñ–≥–æ–Ω—É
];

function isInsideUkraine(latlng) {
  return isInsidePolygon(latlng, ukrainePolygonCoords);
}


// --- –ü–ü–û ---
let placedPVO = [];
let totalPlacedPVO = 0; // –î–æ–¥–∞–Ω–æ –ª—ñ—á–∏–ª—å–Ω–∏–∫ –∑–∞–≥–∞–ª—å–Ω–æ—ó –∫—ñ–ª—å–∫–æ—Å—Ç—ñ –ü–ü–û
let selectedPVOType = null;
const pvoCount = { 
    patriot: 0, mobile: 0, gunner: 0, s300: 0, s100: 0, thaad: 0, gepard: 0, 'drone-interceptor': 0,
    // === NEW: pvoCount for new PVOs and REB ===
    'samp-t': 0, 'iris-t': 0, 'reb': 0
};


// –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –∑–∞—Å—Ç–æ—Å—É–≤–∞–Ω–Ω—è –ø–æ–∫—Ä–∞—â–µ–Ω—å –¥–æ –≤—Å—ñ—Ö —Ä–æ–∑–º—ñ—â–µ–Ω–∏—Ö –ü–ü–û
function applyUpgradesToPVO() {
  placedPVO.forEach(pvo => {
    const originalSpec = pvoSpecs[pvo.type];
    const pvoUpgradeLevels = upgradeLevels[pvo.type]; // –û—Ç—Ä–∏–º—É—î–º–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ñ —Ä—ñ–≤–Ω—ñ –ø–æ–∫—Ä–∞—â–µ–Ω–Ω—è –¥–ª—è —Ü—å–æ–≥–æ —Ç–∏–ø—É –ü–ü–û

    // –ó–∞—Å—Ç–æ—Å–æ–≤—É—î–º–æ –ø–æ–∫—Ä–∞—â–µ–Ω–Ω—è —Ä–∞–¥—ñ—É—Å—É
    pvo.currentRadius = originalSpec.radius * (1 + pvoUpgradeLevels.radius * 0.1); // 10% –∑–∞ –∫–æ–∂–µ–Ω —Ä—ñ–≤–µ–Ω—å
    if (pvo.circle) {
      pvo.circle.setRadius(pvo.currentRadius);
    }

    // –ó–∞—Å—Ç–æ—Å–æ–≤—É—î–º–æ –ø–æ–∫—Ä–∞—â–µ–Ω–Ω—è –µ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ (–∑–º–µ–Ω—à—É—î–º–æ cooldown)
    // REB doesn't have a cooldown in the traditional sense, so skip this for REB
    if (pvo.type !== 'reb') {
      pvo.currentCooldown = originalSpec.cooldown * (1 - pvoUpgradeLevels.efficiency * 0.05); // 5% –∑–º–µ–Ω—à–µ–Ω–Ω—è –∑–∞ –∫–æ–∂–µ–Ω —Ä—ñ–≤–µ–Ω—å
      if (pvo.currentCooldown < 50) pvo.currentCooldown = 50; // –ú—ñ–Ω—ñ–º–∞–ª—å–Ω–∏–π cooldown
    } else {
        pvo.currentCooldown = 0; // REB has no cooldown
    }


    // –û–Ω–æ–≤–ª—é—î–º–æ –≤–ª–∞—Å—Ç–∏–≤–æ—Å—Ç—ñ –Ω–∞ –æ–±'—î–∫—Ç—ñ PVO –¥–ª—è –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è –≤ —Å—Ç–∞—Ç–∏—Å—Ç–∏—Ü—ñ
    pvo.radiusLevel = pvoUpgradeLevels.radius;
    pvo.efficiencyLevel = pvoUpgradeLevels.efficiency;
  });
}

// --- Tooltip –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ü–ü–û ---
let pvoStatsTooltip = document.createElement('div');
pvoStatsTooltip.id = 'pvoStatsTooltip';
pvoStatsTooltip.style.position = 'absolute';
pvoStatsTooltip.style.backgroundColor = 'rgba(0, 0, 0, 0.8)';
pvoStatsTooltip.style.color = 'white';
pvoStatsTooltip.style.padding = '8px';
pvoStatsTooltip.style.borderRadius = '5px';
pvoStatsTooltip.style.zIndex = '1000';
pvoStatsTooltip.style.display = 'none'; // –ü–æ—á–∞—Ç–∫–æ–≤–æ –ø—Ä–∏—Ö–æ–≤–∞–Ω–∏–π
pvoStatsTooltip.style.pointerEvents = 'none'; // –©–æ–± –Ω–µ –±–ª–æ–∫—É–≤–∞–≤ –ø–æ–¥—ñ—ó –º–∏—à—ñ –ø—ñ–¥ –Ω–∏–º
document.body.appendChild(pvoStatsTooltip);

function showPVOStatsTooltip(e, pvo) {
    const pvoUpgradeLevels = upgradeLevels[pvo.type];
    let cooldownDisplay = pvo.type === 'reb' ? '–ù–µ–º–∞—î' : `${(pvo.currentCooldown / 1000).toFixed(1)} —Å–µ–∫ (–†—ñ–≤–µ–Ω—å: ${pvoUpgradeLevels.efficiency})`;

    const tooltipContent = `
        <strong>${pvo.type.toUpperCase()}</strong><br>
        –†–∞–¥—ñ—É—Å: ${Math.round(pvo.currentRadius / 1000)} –∫–º (–†—ñ–≤–µ–Ω—å: ${pvoUpgradeLevels.radius})<br>
        –ü–µ—Ä–µ–∑–∞—Ä—è–¥–∫–∞: ${cooldownDisplay}
    `;
    pvoStatsTooltip.innerHTML = tooltipContent;
    pvoStatsTooltip.style.left = (e.originalEvent.pageX + 10) + 'px';
    pvoStatsTooltip.style.top = (e.originalEvent.pageY + 10) + 'px';
    pvoStatsTooltip.style.display = 'block';
}

function hidePVOStatsTooltip() {
    pvoStatsTooltip.style.display = 'none';
}


document.querySelectorAll('.pvo-select-btn').forEach(btn => {
  const type = btn.dataset.type;
  const spec = pvoSpecs[type];
  // Update button text to show cost
  btn.innerHTML += ` (${spec.cost} –º–æ–Ω–µ—Ç)`;

  btn.addEventListener('click', () => {
    if (totalPlacedPVO >= 25) { // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞ –∑–∞–≥–∞–ª—å–Ω—É –∫—ñ–ª—å–∫—ñ—Å—Ç—å –ü–ü–û
      alert("–ù–µ –º–æ–∂–Ω–∞ —Å—Ç–∞–≤–∏—Ç–∏ –±—ñ–ª—å—à–µ 25 –ü–ü–û!");
      return;
    }
    if (pvoCount[type] >= pvoSpecs[type].max) {
      alert(`–ú–∞–∫—Å–∏–º—É–º ${pvoSpecs[type].max} –æ–¥–∏–Ω–∏—Ü—å ${type.toUpperCase()}`);
      return;
    }

    const pvoCost = pvoSpecs[type].cost;
    let isFreePlacement = false;

    if (coins < pvoCost) {
    alert(`–ù–µ–¥–æ—Å—Ç–∞—Ç–Ω—å–æ –º–æ–Ω–µ—Ç! –ü–æ—Ç—Ä—ñ–±–Ω–æ ${pvoCost} –º–æ–Ω–µ—Ç.`);
    return;
  }


    selectedPVOType = type;
    map.once('click', (e) => {
      // –ü–ï–†–ï–í–Ü–†–ö–ê –ù–ê –¢–ï–†–ò–¢–û–†–Ü–Æ –£–ö–†–ê–á–ù–ò
      if (!isInsideUkraine(e.latlng)) {
        alert("–ü–ü–û –º–æ–∂–Ω–∞ —Ä–æ–∑–º—ñ—â—É–≤–∞—Ç–∏ —Ç—ñ–ª—å–∫–∏ –Ω–∞ —Ç–µ—Ä–∏—Ç–æ—Ä—ñ—ó –£–∫—Ä–∞—ó–Ω–∏!");
        return; // –ü–µ—Ä–µ—Ä–∏–≤–∞—î–º–æ —Ä–æ–∑–º—ñ—â–µ–Ω–Ω—è –ü–ü–û
      }

      coins -= pvoCost;
      updateGameUI();


      const spec = pvoSpecs[type];
      const pvoUpgradeLevels = upgradeLevels[type]; // –û—Ç—Ä–∏–º—É—î–º–æ –ø–æ—Ç–æ—á–Ω—ñ —Ä—ñ–≤–Ω—ñ –ø–æ–∫—Ä–∞—â–µ–Ω–Ω—è –¥–ª—è —Ü—å–æ–≥–æ —Ç–∏–ø—É

      // –†–æ–∑—Ä–∞—Ö–æ–≤—É—î–º–æ –ø–æ—á–∞—Ç–∫–æ–≤—ñ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –¥–ª—è –Ω–æ–≤–æ–≥–æ –ü–ü–û –∑ —É—Ä–∞—Ö—É–≤–∞–Ω–Ω—è–º –ø–æ–∫—Ä–∞—â–µ–Ω—å
      const initialCurrentRadius = spec.radius * (1 + pvoUpgradeLevels.radius * 0.1);
      let initialCurrentCooldown = spec.cooldown * (1 - pvoUpgradeLevels.efficiency * 0.05);
      if (initialCurrentCooldown < 50) initialCurrentCooldown = 50; // –ú—ñ–Ω—ñ–º–∞–ª—å–Ω–∏–π cooldown

      const marker = L.marker(e.latlng, { icon: icons[type] }).addTo(map);
      const circle = L.circle(e.latlng, {
        radius: initialCurrentRadius, // –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ —Ä–æ–∑—Ä–∞—Ö–æ–≤–∞–Ω–∏–π —Ä–∞–¥—ñ—É—Å
        color: type === 'reb' ? 'purple' : 'blue', // REB has a different color circle
        fillOpacity: 0.1
      }).addTo(map);
      
      const newPvo = {
        type: type,
        category: spec.type,
        latlng: e.latlng,
        radius: spec.radius, // –û—Ä–∏–≥—ñ–Ω–∞–ª—å–Ω–∏–π –±–∞–∑–æ–≤–∏–π —Ä–∞–¥—ñ—É—Å –∑ pvoSpecs
        marker: marker,
        circle: circle,
        currentRadius: initialCurrentRadius, // –ü–æ—Ç–æ—á–Ω–∏–π —Ä–∞–¥—ñ—É—Å –∑ —É—Ä–∞—Ö—É–≤–∞–Ω–Ω—è–º –ø–æ–∫—Ä–∞—â–µ–Ω—å
        currentCooldown: initialCurrentCooldown, // –ü–æ—Ç–æ—á–Ω–∏–π cooldown –∑ —É—Ä–∞—Ö—É–≤–∞–Ω–Ω—è–º –ø–æ–∫—Ä–∞—â–µ–Ω—å
        radiusLevel: pvoUpgradeLevels.radius, // –î–æ–¥–∞–Ω–æ –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        efficiencyLevel: pvoUpgradeLevels.efficiency, // –î–æ–¥–∞–Ω–æ –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        isJammer: spec.isJammer || false // === NEW: isJammer property for REB ===
      };
      placedPVO.push(newPvo);
      pvoCount[type]++;
      totalPlacedPVO++; // –ó–±—ñ–ª—å—à—É—î–º–æ –∑–∞–≥–∞–ª—å–Ω–∏–π –ª—ñ—á–∏–ª—å–Ω–∏–∫ –ü–ü–û
      
      // –î–æ–¥–∞—î–º–æ –æ–±—Ä–æ–±–Ω–∏–∫–∏ –ø–æ–¥—ñ–π –º–∏—à—ñ –¥–ª—è –º–∞—Ä–∫–µ—Ä–∞
      marker.on('mouseover', (e) => showPVOStatsTooltip(e, newPvo));
      marker.on('mouseout', hidePVOStatsTooltip);
    });
  });
});

// –î–æ–¥–∞—î–º–æ –æ–±—Ä–æ–±–Ω–∏–∫–∏ –ø–æ–¥—ñ–π –¥–ª—è –∫–Ω–æ–ø–æ–∫ –ø—Ä–æ–∫–∞—á–∫–∏
document.querySelectorAll('.upgrade-btn').forEach(btn => {
  btn.addEventListener('click', () => {
    if (placedPVO.length === 0) {
        alert("–°–ø–æ—á–∞—Ç–∫—É —Ä–æ–∑–º—ñ—Å—Ç—ñ—Ç—å —Ö–æ—á–∞ –± –æ–¥–Ω—É —Å–∏—Å—Ç–µ–º—É –ü–ü–û, —â–æ–± —ó—ó –ø–æ–∫—Ä–∞—â–∏—Ç–∏.");
        return;
    }
    upgradeInProgress = btn.dataset.upgradeType; // 'radius' –∞–±–æ 'efficiency'
    map.getContainer().style.cursor = 'crosshair'; // –ó–º—ñ–Ω—é—î–º–æ –∫—É—Ä—Å–æ—Ä
    alert(`–ö–ª—ñ–∫–Ω—ñ—Ç—å –Ω–∞ —Ä–æ–∑–º—ñ—â–µ–Ω—É –ü–ü–û, —è–∫—É —Ö–æ—á–µ—Ç–µ –ø–æ–∫—Ä–∞—â–∏—Ç–∏ (${upgradeInProgress === 'radius' ? '—Ä–∞–¥—ñ—É—Å' : '–µ—Ñ–µ–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å'})`);
  });
});

// –î–æ–¥–∞—î–º–æ –æ–±—Ä–æ–±–Ω–∏–∫ –∫–ª—ñ–∫—É –Ω–∞ –∫–∞—Ä—Ç—É –¥–ª—è –≤–∏–±–æ—Ä—É –ü–ü–û –¥–ª—è –ø–æ–∫—Ä–∞—â–µ–Ω–Ω—è / –ø—Ä–æ–¥–∞–∂—É
map.on('click', (e) => {
  if (upgradeInProgress) {
    let upgraded = false;
    // –®—É–∫–∞—î–º–æ, —á–∏ –∫–ª—ñ–∫–Ω—É–ª–∏ –Ω–∞ —è–∫–µ—Å—å –∑ —Ä–æ–∑–º—ñ—â–µ–Ω–∏—Ö –ü–ü–û
    for (let i = placedPVO.length - 1; i >= 0; i--) {
      const pvo = placedPVO[i];
      // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ –∫–ª—ñ–∫ –±—É–≤ –¥–æ—Å—Ç–∞—Ç–Ω—å–æ –±–ª–∏–∑—å–∫–æ –¥–æ –º–∞—Ä–∫–µ—Ä–∞ –ü–ü–û
      const distance = map.latLngToLayerPoint(e.latlng).distanceTo(map.latLngToLayerPoint(pvo.latlng));
      if (distance < 20) { // –ü–æ—Ä–æ–≥–æ–≤–∞ –≤—ñ–¥—Å—Ç–∞–Ω—å –¥–ª—è –∫–ª—ñ–∫—É –Ω–∞ –º–∞—Ä–∫–µ—Ä—ñ
        const pvoType = pvo.type;
        const upgradeType = upgradeInProgress;
        let cost = 0;

        // –í–ê–ñ–õ–ò–í–û: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∏–π —Ä—ñ–≤–µ–Ω—å –ø—Ä–æ–∫–∞—á–∫–∏
        const MAX_UPGRADE_LEVEL = 3; // –ó–∞–¥–∞—î–º–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–∏–π —Ä—ñ–≤–µ–Ω—å

        // REB units cannot be upgraded (initially)
        if (pvoType === 'reb') {
            alert('–†–ï–ë –Ω–µ –ø—ñ–¥–ª—è–≥–∞—î –ø–æ–∫—Ä–∞—â–µ–Ω–Ω—é.');
            upgraded = true;
            break;
        }


        if (upgradeType === 'radius') {
          if (upgradeLevels[pvoType].radius >= MAX_UPGRADE_LEVEL) {
            alert(`–†–∞–¥—ñ—É—Å ${pvoType.toUpperCase()} –≤–∂–µ –¥–æ—Å—è–≥ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ —Ä—ñ–≤–Ω—è (${MAX_UPGRADE_LEVEL}).`);
            upgraded = true;
            break;
          }
          cost = 50 + upgradeLevels[pvoType].radius * 25; // –ó—Ä–æ—Å—Ç–∞—é—á–∞ –≤–∞—Ä—Ç—ñ—Å—Ç—å
        } else if (upgradeType === 'efficiency') {
          if (upgradeLevels[pvoType].efficiency >= MAX_UPGRADE_LEVEL) {
            alert(`–ï—Ñ–µ–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å ${pvoType.toUpperCase()} –≤–∂–µ –¥–æ—Å—è–≥–ª–∞ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ —Ä—ñ–≤–Ω—è (${MAX_UPGRADE_LEVEL}).`);
            upgraded = true;
            break;
          }
          cost = 75 + upgradeLevels[pvoType].efficiency * 50; // –ó—Ä–æ—Å—Ç–∞—é—á–∞ –≤–∞—Ä—Ç—ñ—Å—Ç—å
        }

        if (coins < cost) {
          alert(`–ù–µ–¥–æ—Å—Ç–∞—Ç–Ω—å–æ –º–æ–Ω–µ—Ç –¥–ª—è –ø–æ–∫—Ä–∞—â–µ–Ω–Ω—è ${pvoType.toUpperCase()}! –ü–æ—Ç—Ä—ñ–±–Ω–æ ${cost} –º–æ–Ω–µ—Ç.`);
          upgraded = true; // –ü–æ–∑–Ω–∞—á–∞—î–º–æ, —â–æ —Å–ø—Ä–æ–±–∞ –±—É–ª–∞, —â–æ–± –≤–∏–π—Ç–∏ –∑ —Ä–µ–∂–∏–º—É –ø–æ–∫—Ä–∞—â–µ–Ω–Ω—è
          break;
        }

        if (upgradeType === 'radius') {
          upgradeLevels[pvoType].radius++;
          alert(`–†–∞–¥—ñ—É—Å ${pvoType.toUpperCase()} –∑–±—ñ–ª—å—à–µ–Ω–æ! –ü–æ—Ç–æ—á–Ω–∏–π —Ä—ñ–≤–µ–Ω—å: ${upgradeLevels[pvoType].radius}`);
        } else if (upgradeType === 'efficiency') {
          upgradeLevels[pvoType].efficiency++;
          alert(`–ï—Ñ–µ–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å ${pvoType.toUpperCase()} –∑–±—ñ–ª—å—à–µ–Ω–æ! –ü–æ—Ç–æ—á–Ω–∏–π —Ä—ñ–≤–µ–Ω—å: ${upgradeLevels[pvoType].efficiency}`);
        }
        coins -= cost;
        upgraded = true;
        break; // –í–∏—Ö–æ–¥–∏–º–æ –∑ —Ü–∏–∫–ª—É –ø—ñ—Å–ª—è –ø–æ–∫—Ä–∞—â–µ–Ω–Ω—è –æ–¥–Ω–æ–≥–æ –ü–ü–û
      }
    }

    if (upgraded) {
      map.getContainer().style.cursor = ''; // –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ –∫—É—Ä—Å–æ—Ä
      upgradeInProgress = null; // –°–∫–∏–¥–∞—î–º–æ —Ä–µ–∂–∏–º –ø–æ–∫—Ä–∞—â–µ–Ω–Ω—è
      updateGameUI(); // –û–Ω–æ–≤–ª—é—î–º–æ –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è –º–æ–Ω–µ—Ç
      applyUpgradesToPVO(); // –ó–∞—Å—Ç–æ—Å–æ–≤—É—î–º–æ –Ω–æ–≤—ñ –ø–æ–∫—Ä–∞—â–µ–Ω–Ω—è –¥–æ –≤—Å—ñ—Ö —Ä–æ–∑–º—ñ—â–µ–Ω–∏—Ö –ü–ü–û
    } else {
        // –Ø–∫—â–æ –∫–ª—ñ–∫–Ω—É–ª–∏ –Ω–µ –Ω–∞ –ü–ü–û, –∞–ª–µ —Ä–µ–∂–∏–º –ø–æ–∫—Ä–∞—â–µ–Ω–Ω—è –∞–∫—Ç–∏–≤–Ω–∏–π
        alert("–ë—É–¥—å –ª–∞—Å–∫–∞, –∫–ª—ñ–∫–Ω—ñ—Ç—å –Ω–∞ —Ä–æ–∑–º—ñ—â–µ–Ω—É —Å–∏—Å—Ç–µ–º—É –ü–ü–û.");
    }
  }
  // –õ–æ–≥—ñ–∫–∞ –ø—Ä–æ–¥–∞–∂—É –ü–ü–û –∑–∞–ª–∏—à–∞—î—Ç—å—Å—è —Ç—É—Ç, —è–∫—â–æ upgradeInProgress –Ω–µ–∞–∫—Ç–∏–≤–Ω–∏–π
  else if (sellingPVO) {
    let sold = false;
    for (let i = placedPVO.length - 1; i >= 0; i--) {
      const pvo = placedPVO[i];
      const distance = map.latLngToLayerPoint(e.latlng).distanceTo(map.latLngToLayerPoint(pvo.latlng));
      if (distance < 20) {
        map.removeLayer(pvo.marker);
        map.removeLayer(pvo.circle);
        pvoCount[pvo.type]--;
        totalPlacedPVO--;
        const refundAmount = Math.floor(pvoSpecs[pvo.type].cost / 2);
        coins += refundAmount;
        updateGameUI();
        placedPVO.splice(i, 1);
        sold = true;
        break;
      }
    }
    if (sold) {
      sellingPVO = false;
      sellPVOBtn.style.backgroundColor = '';
      sellPVOBtn.innerText = "–ü—Ä–æ–¥–∞—Ç–∏ –ü–ü–û";
      map.getContainer().style.cursor = '';
    } else {
      alert("–ù–µ–º–∞—î –ü–ü–û –¥–ª—è –ø—Ä–æ–¥–∞–∂—É –≤ —Ü—ñ–π —Ç–æ—á—Ü—ñ.");
    }
  }
});


// --- –ö–Ω–æ–ø–∫–∞ –ø—Ä–æ–¥–∞–∂—É –ü–ü–û ---
let sellingPVO = false;
const sellPVOBtn = document.getElementById('sellPVOBtn'); // Get by ID
sellPVOBtn.onclick = () => {
  sellingPVO = !sellingPVO; // –ü–µ—Ä–µ–º–∏–∫–∞—î–º–æ —Ä–µ–∂–∏–º –ø—Ä–æ–¥–∞–∂—É
  if (sellingPVO) {
    sellPVOBtn.style.backgroundColor = 'red';
    sellPVOBtn.innerText = "–ö–ª—ñ–∫–Ω—ñ—Ç—å –Ω–∞ –ü–ü–û –¥–ª—è –ø—Ä–æ–¥–∞–∂—É";
    map.getContainer().style.cursor = 'crosshair'; // –ó–º—ñ–Ω—é—î–º–æ –∫—É—Ä—Å–æ—Ä
  } else {
    sellPVOBtn.style.backgroundColor = ''; // –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ –ø–æ—á–∞—Ç–∫–æ–≤–∏–π –∫–æ–ª—ñ—Ä
    sellPVOBtn.innerText = "–ü—Ä–æ–¥–∞—Ç–∏ –ü–ü–û";
    map.getContainer().style.cursor = ''; // –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ –∫—É—Ä—Å–æ—Ä
  }
};


// --- AI —Ü—ñ–ª—å ---
function chooseSmartTarget() {
  const filtered = targets.filter(t => !t.destroyed);
  if (filtered.length === 0) {
    return null; // All targets destroyed
  }
  if (Math.random() < 0.5) {
    return filtered[Math.floor(Math.random() * filtered.length)];
  } else {
    return filtered.sort((a, b) => {
      const aPvo = placedPVO.filter(p => map.distance(p.latlng, [a.lat, a.lon]) < p.currentRadius).length; // –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ currentRadius
      const bPvo = placedPVO.filter(p => map.distance(p.latlng, [b.lat, b.lon]) < b.currentRadius).length; // –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ currentRadius
      return aPvo - bPvo;
    })[0];
  }
}

function showExplosionAnimation(latlng) {
  const explosion = L.divIcon({
    html: '<img src="https://i.gifer.com/2a9n.gif" style="width:50px; height:50px;">',
    className: ''
  });
  const marker = L.marker(latlng, { icon: explosion }).addTo(map);
  setTimeout(() => map.removeLayer(marker), 800);
}


// --- –ï–ª–µ–º–µ–Ω—Ç –¥–ª—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å –ø—Ä–æ –∑–∞–ø—É—Å–∫ ---
const launchMessageEl = document.getElementById('launchMessage'); // Get by ID
const launchMessageTextEl = document.getElementById('launchMessageText'); // Get the paragraph for text
const radioImageEl = document.getElementById('radioImage'); // Get the image element

function showLaunchMessage(message, showImage = false) { // Added showImage parameter
  launchMessageTextEl.innerText = message;
  
  if (showImage) {
      radioImageEl.style.display = 'block'; // Show the image
  } else {
      radioImageEl.style.display = 'none'; // Hide the image
  }

  launchMessageEl.style.display = 'flex'; // Use flex for centering
  launchMessageEl.style.opacity = '1';

  setTimeout(() => {
    launchMessageEl.style.opacity = '0';
    setTimeout(() => {
      launchMessageEl.style.display = 'none';
      radioImageEl.style.display = 'none'; // Ensure image is hidden when message disappears
    }, 500); // –ß–µ–∫–∞—î–º–æ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è –ø–µ—Ä–µ—Ö–æ–¥—É, –ø–µ—Ä—à –Ω—ñ–∂ –ø—Ä–∏—Ö–æ–≤–∞—Ç–∏ –µ–ª–µ–º–µ–Ω—Ç
  }, 2500); // –ü–æ–∫–∞–∑–∞—Ç–∏ –ø—Ä–æ—Ç—è–≥–æ–º 1.5 —Å–µ–∫—É–Ω–¥–∏
}


// --- –°–ø–∞–≤–Ω —à–∞—Ö–µ–¥—ñ–≤ ---
function canFireFrom(pvo, cooldown) { // –ü—Ä–∏–π–º–∞—î–º–æ cooldown —è–∫ –ø–∞—Ä–∞–º–µ—Ç—Ä
  const now = Date.now();
  if (!pvoCooldowns.has(pvo)) return true;
  droneFlyingSound.play();
  return now - pvoCooldowns.get(pvo) >= cooldown;
}

function triggerPvoCooldown(pvo) {
  pvoCooldowns.set(pvo, Date.now());
}

function spawnShahedWave(count = 5) {
  countdown = 25; // –ó–º—ñ–Ω–µ–Ω–æ –Ω–∞ 25 —Å–µ–∫—É–Ω–¥
  // –í–∏–∑–Ω–∞—á–∞—î–º–æ –¥–≤—ñ —Ç–æ—á–∫–∏ –¥–ª—è —É—è–≤–Ω–æ—ó –ª—ñ–Ω—ñ—ó –≤ –†–æ—Å—ñ—ó (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, –º—ñ–∂ —Ç–∞–±–æ–≤ —Ç–∞ —Å–æ—á—ñ –ø—É—Ç—ñ–Ω —Ö—É–π–ª–æ)
  const lineStartPoint = L.latLng(53.7877,42.1436); // —Ç–∞–º–±–æ–≤
  const lineEndPoint = L.latLng(43.5804,39.7925);   // —Å–æ—á—ñ

  for (let i = 0; i < count; i++) {
    setTimeout(() => {
      // –í–∏–±–∏—Ä–∞—î–º–æ –≤–∏–ø–∞–¥–∫–æ–≤—É —Ç–æ—á–∫—É –Ω–∞ —É—è–≤–Ω—ñ–π –ª—ñ–Ω—ñ—ó —è–∫ —Å—Ç–∞—Ä—Ç —à–∞—Ö–µ–¥–∞
      const lineProgress = Math.random();
      const startLat = lineStartPoint.lat + (lineEndPoint.lat - lineStartPoint.lat) * lineProgress;
      const startLng = lineStartPoint.lng + (lineEndPoint.lng - lineEndPoint.lng) * lineProgress;
      const start = L.latLng(startLat, startLng);

      const target = chooseSmartTarget(); // –¶—ñ–ª—ñ –∑–∞–ª–∏—à–∞—é—Ç—å—Å—è —É–∫—Ä–∞—ó–Ω—Å—å–∫–∏–º–∏
      if (!target || target.destroyed) return;
      const end = L.latLng(target.lat, target.lon);

      const marker = L.marker(start, { icon: icons.shahed }).addTo(map);
      marker.hp = 3; // –®–∞—Ö–µ–¥ –º–∞—î 3 HP
      marker.target = target; // –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –æ–±'—î–∫—Ç —Ü—ñ–ª—ñ –¥–ª—è handleShahedHit

      // --- –ü–æ—á–∞—Ç–∫–æ–≤–∏–π –ø–æ–≤–æ—Ä–æ—Ç —à–∞—Ö–µ–¥–∞ –ø—Ä–∏ –≤–∏–ª—å–æ—Ç—ñ ---
      const initialAngle = Math.atan2(end.lat - start.lat, end.lng - start.lng) * 180 / Math.PI;
      const imgEl = marker.getElement()?.querySelector('img');
      if (imgEl) {
        imgEl.style.transformOrigin = 'center';
        imgEl.style.transform = `rotate(${initialAngle + 90}deg)`; // Set initial rotation to face target
      }
      // --- –ö—ñ–Ω–µ—Ü—å –ø–æ—á–∞—Ç–∫–æ–≤–æ–≥–æ –ø–æ–≤–æ—Ä–æ—Ç—É ---


      const indicator = L.circle(end, { radius: 20000, color: 'red', fillOpacity: 0.05 }).addTo(map);

      let t = 0;
      const baseSteps = 2000; // Base steps for shahed movement
      let currentSteps = baseSteps; // Will be modified by REB

      const interval = setInterval(() => {
        t++;

        // === NEW: REB jamming effect ===
        let rebFound = false;
        placedPVO.forEach(pvo => {
            if (pvo.type === 'reb' && map.distance(pvo.latlng, marker.getLatLng()) < pvo.currentRadius) {
                rebFound = true;
            }
        });

        if (rebFound) {
            currentSteps = baseSteps * 1.5; // Shahed slows down by 50%
        } else {
            currentSteps = baseSteps; // No REB, normal speed
        }
        // === END NEW: REB jamming effect ===


        if (t >= currentSteps) { // Use currentSteps here
          clearInterval(interval);
          if (map.hasLayer(marker)) {
            map.removeLayer(marker);
            map.removeLayer(indicator);
            handleShahedHit(target);
          }
          return;
        }

        const progress = t / currentSteps; // Use currentSteps for progress calculation
        // –†—É—Ö —Å—Ç—Ä–æ–≥–æ –ø–æ –ø—Ä—è–º—ñ–π –ª—ñ–Ω—ñ—ó –¥–æ —Ü—ñ–ª—ñ
        const lat = start.lat + (end.lat - start.lat) * progress;
        const lng = start.lng + (end.lng - start.lng) * progress;
        const currentPos = L.latLng(lat, lng);
        marker.setLatLng(currentPos);

        // –ü–æ–≤–æ—Ä–æ—Ç –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è "—à–∞—Ö–µ–¥–∞"
        // This recalculates the angle based on current position and remaining target for smooth rotation
        const angle = Math.atan2(end.lat - currentPos.lat, end.lng - currentPos.lng) * 180 / Math.PI;
        const img = marker.getElement()?.querySelector('img');
        if (img) {
          img.style.transformOrigin = 'center';
          img.style.transform = `rotate(${angle + 90}deg)`;
        }

        // –°–ª—ñ–¥
        if (t % 8 === 0 && currentPos) {
          const trail = L.circle(currentPos, {
            radius: 300,
            color: 'white',
            fillOpacity: 0.1,
            stroke: false
          }).addTo(map);
          setTimeout(() => map.removeLayer(trail), 3000);
        }

        // –ó–æ–Ω–∞ –ü–ü–û (Only Mobile Groups for Shaheds)
        if (currentPos) {
          placedPVO.forEach(pvo => {
            if (pvo.category === 'mobile' && map.distance(pvo.latlng, currentPos) < pvo.currentRadius && canFireFrom(pvo, pvo.currentCooldown)) { // –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ currentRadius —ñ currentCooldown
              triggerPvoCooldown(pvo);

              marker.hp--; // –ó–º–µ–Ω—à—É—î–º–æ HP —à–∞—Ö–µ–¥–∞
              hitSound.play();
              L.polyline([pvo.latlng, currentPos], {
                color: 'blue',
                weight: 3,
                dashArray: '4'
              }).addTo(map);

              setTimeout(() => map.eachLayer(layer => {
                if (layer instanceof L.Polyline && layer.options.color === 'blue') {
                  map.removeLayer(layer);
                }
              }), 300);

              if (marker.hp <= 0 && map.hasLayer(marker)) { // –®–∞—Ö–µ–¥ –∑–Ω–∏—â–µ–Ω–æ
                showExplosionAnimation(currentPos);
                explosionSound.play();
                map.removeLayer(marker);
                map.removeLayer(indicator);
                rewardCoin(10);
                intercepted++; // –û–Ω–æ–≤–ª—é—î–º–æ –≥–ª–æ–±–∞–ª—å–Ω–∏–π –ª—ñ—á–∏–ª—å–Ω–∏–∫
                updateGameUI(); // –û–Ω–æ–≤–ª—é—î–º–æ UI
                clearInterval(interval); // –ó—É–ø–∏–Ω—è—î–º–æ –ø–æ–ª—ñ—Ç —à–∞—Ö–µ–¥–∞

                // If the PVO that intercepted was a drone-interceptor, remove it.
                if (pvo.type === 'drone-interceptor') {
                  map.removeLayer(pvo.marker);
                  map.removeLayer(pvo.circle);
                  const index = placedPVO.indexOf(pvo);
                  if (index > -1) {
                    placedPVO.splice(index, 1);
                  }
                  pvoCount['drone-interceptor']--;
                  totalPlacedPVO--;
                }
              }
            }
          });
        }
      }, 20);
    }, i * 800);
  }
}


function spawnMissileWave(type = 'kinzhal', count = 3, startOverride = null, delayBetweenLaunches = 1000) { // Added delayBetweenLaunches parameter
  const configs = {
    kinzhal: {
      name: '–ö—ñ–Ω–∂–∞–ª',
      icon: icons.kinzhal,
      speed: 7,
      origin: () => L.latLng(53.26 + (Math.random() - 0.5) * 0.5, 40.42 + (Math.random() - 0.5) * 0.5) // === –ù–û–í–ê –ó–ú–Ü–ù–ê: –ö—ñ–Ω–∂–∞–ª–∏ —Ç–µ–ø–µ—Ä –∑ –¢–∞–º–±–æ–≤–∞ ===
    },
    ballistic: {
      name: '–ë–∞–ª—ñ—Å—Ç–∏—á–Ω–∞',
      icon: icons.ballistic,
      speed: 4, // === –ó–ú–Ü–ù–ê: –ó–±—ñ–ª—å—à–µ–Ω–∞ —à–≤–∏–¥–∫—ñ—Å—Ç—å –±–∞–ª—ñ—Å—Ç–∏—á–Ω–æ—ó —Ä–∞–∫–µ—Ç–∏ ===
      origin: () => L.latLng(51.61 + (Math.random() - 0.5) * 0.5, 39.17 + (Math.random() - 0.5) * 0.5) // === –ó–ú–Ü–ù–ê: –ë–∞–ª—ñ—Å—Ç–∏—á–Ω—ñ —Ä–∞–∫–µ—Ç–∏ —Ç–µ–ø–µ—Ä –∑ –í–æ—Ä–æ–Ω—ñ–∂—É ===
    },
    fighter_missile: { // –ö–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—è –¥–ª—è —Ä–∞–∫–µ—Ç –≤–∏–Ω–∏—â—É–≤–∞—á–∞
      name: '–†–∞–∫–µ—Ç–∞ –≤–∏–Ω–∏—â—É–≤–∞—á–∞',
      icon: icons.fighter_missile,
      speed: 1.5, // === –ó–ú–Ü–ù–ê: –ó–º–µ–Ω—à–µ–Ω–∞ —à–≤–∏–¥–∫—ñ—Å—Ç—å —Ä–∞–∫–µ—Ç –∑ –∞–≤—ñ–∞—Ü—ñ—ó ===
      // origin —Ç—É—Ç –Ω–µ –ø–æ—Ç—Ä—ñ–±–µ–Ω, –±–æ –π–æ–≥–æ –∑–∞–≤–∂–¥–∏ override'–∏—Ç—å startOverride
    }
  };

  const config = configs[type];
  if (!config) { // Add a check in case an unknown missile type is passed
    console.error("Unknown missile type:", type);
    return;
  }

  // –ü–æ–∫–∞–∑–∞—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ –∑–∞–ø—É—Å–∫ "–ö–∏–Ω–∂–∞–ª–∞"
  if (type === 'kinzhal') {
    showLaunchMessage('–ü—É—Å–∫ –∞–µ—Ä–æ–±–∞–ª—ñ—Å—Ç–∏—á–Ω–æ—ó —Ä–∞–∫–µ—Ç–∏ –•47–ú2 "–ö–∏–Ω–∂–∞–ª"');
    alarmSound.play();
  }
  // –î–æ–¥–∞–π—Ç–µ —Ü–µ–π –±–ª–æ–∫ –¥–ª—è –±–∞–ª—ñ—Å—Ç–∏—á–Ω–∏—Ö —Ä–∞–∫–µ—Ç
  if (type === 'ballistic') {
    showLaunchMessage('–ó–∞–≥—Ä–æ–∑–∞ –∑–∞—Å—Ç–æ—Å—É–≤–∞–Ω–Ω—è –±–∞–ª—ñ—Å—Ç–∏—á–Ω–æ–≥–æ –æ–∑–±—Ä–æ—î–Ω–Ω—è');
    alarmSound.play();
  }


  for (let i = 0; i < count; i++) {
    setTimeout(() => {
      const start = startOverride ? startOverride : config.origin(); // –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ startOverride, —è–∫—â–æ –≤—ñ–Ω —î
      const target = chooseSmartTarget();
      if (!target || target.destroyed) return;
      const end = L.latLng(target.lat, target.lon);

      const marker = L.marker(start, { icon: config.icon }).addTo(map);
      // –î–æ–¥–∞—î–º–æ HP –¥–æ —Ä–∞–∫–µ—Ç
      marker.hp = 2; // –†–∞–∫–µ—Ç–∞ –º–∞—î 2 HP

      const indicator = L.circle(end, { radius: 20000, color: 'orange', fillOpacity: 0.05 }).addTo(map);

      let t = 0;
      const steps = 1800 / config.speed;
      const interval = setInterval(() => {
        t++;
        if (t >= steps) {
          clearInterval(interval);
          if (map.hasLayer(marker)) { // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ –º–∞—Ä–∫–µ—Ä —â–µ —ñ—Å–Ω—É—î
            map.removeLayer(marker);
            map.removeLayer(indicator);
            handleShahedHit(target);
          }
          return;
        }

        const progress = t / steps;
        const lat = start.lat + (end.lat - start.lat) * progress + 0.01 * Math.sin(t / 8 + i);
        const lng = start.lng + (end.lng - start.lng) * progress + 0.01 * Math.cos(t / 10 + i);
        const current = L.latLng(lat, lng);
        marker.setLatLng(current);

        // –ü–æ–≤–æ—Ä–æ—Ç
        const angle = Math.atan2(end.lat - lat, end.lng - lng) * 180 / Math.PI;
        const img = marker.getElement()?.querySelector('img');
        if (img) img.style.transform = `rotate(${angle + 90}deg)`;

        // –°–ª—ñ–¥
        if (t % 10 === 0) {
          const trail = L.circle(current, {
            radius: 400,
            color: 'orange',
            fillOpacity: 0.1,
            stroke: false
          }).addTo(map);
          setTimeout(() => map.removeLayer(trail), 4000);
        }

        // –ü–ü–û (Only Rocket PVOs for Missiles)
        placedPVO.forEach(pvo => {
          if (pvo.category === 'rocket' && map.distance(pvo.latlng, current) < pvo.currentRadius && canFireFrom(pvo, pvo.currentCooldown)) { // –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ currentRadius —ñ currentCooldown
            triggerPvoCooldown(pvo);
            marker.hp--; // –ó–º–µ–Ω—à—É—î–º–æ HP —Ä–∞–∫–µ—Ç–∏
            missileLaunchSound.play();
            L.polyline([pvo.latlng, current], {
              color: 'blue',
              weight: 3,
              dashArray: '4'
            }).addTo(map);


            setTimeout(() => map.eachLayer(layer => {
              if (layer instanceof L.Polyline && layer.options.color === 'blue') {
                map.removeLayer(layer);
              }
            }), 300);

            if (marker.hp <= 0 && map.hasLayer(marker)) { // –†–∞–∫–µ—Ç–∞ –∑–Ω–∏—â–µ–Ω–∞
              showExplosionAnimation(current);
              explosionSound.play()
              map.removeLayer(marker);
              map.removeLayer(indicator);
              rewardCoin(10);
              intercepted++; // –û–Ω–æ–≤–ª—é—î–º–æ –≥–ª–æ–±–∞–ª—å–Ω–∏–π –ª—ñ—á–∏–ª—å–Ω–∏–∫
              updateGameUI(); // –û–Ω–æ–≤–ª—é—î–º–æ UI
              clearInterval(interval); // –ó—É–ø–∏–Ω—è—î–º–æ –ø–æ–ª—ñ—Ç —Ä–∞–∫–µ—Ç–∏
            }
          }
        });

      }, 20);
    }, i * delayBetweenLaunches); // –Ü–Ω—Ç–µ—Ä–≤–∞–ª –∑–∞–ø—É—Å–∫—É –º—ñ–∂ —Ä–∞–∫–µ—Ç–∞–º–∏
  }
}

// --- –§—ñ–∫—Å–æ–≤–∞–Ω—ñ —Ç–æ—á–∫–∏ —Å—Ç–∞—Ä—Ç—É –¥–ª—è –≤–∏–Ω–∏—â—É–≤–∞—á—ñ–≤ (–°–∞—Ä–∞—Ç–æ–≤) ---
const AerodromMasive = [
  L.latLng(51.53, 46.03), // saratov
  L.latLng(68.1225,33.4863) // –æ–ª–µ–Ω—å—è
];

// –¢–æ—á–∫–∏ –ø—Ä–∏–ª—å–æ—Ç—É –¥–ª—è –ø–µ—Ä—à–æ—ó –Ω–æ–≥–∏ –≤–∏–Ω–∏—â—É–≤–∞—á—ñ–≤ (–ë—î–ª–≥–æ—Ä–æ–¥ —Ç–∞ –†–æ—Å—Ç–æ–≤)
const fighterMidpointLocations = [
  L.latLng(48.0307,43.1102), // –í–æ–ª–≥–æ–¥–æ–Ω—Å—å–∫–µ –≤–æ–¥–æ—Å—Ö–æ–≤–∏—â–µ
  L.latLng(52.9986,43.2640),  // –ü–µ–Ω–∑–∞ –∑–∞—Ö—ñ–¥.
  L.latLng(46.3436,48.0980) // –ê—Å—Ç—Ä–∞—Ö–∞–Ω—å
];


function launchRandomFighters(count = 3) {
  showLaunchMessage('–ó–ª—ñ—Ç —Å—Ç—Ä–∞—Ç–µ–≥—ñ—á–Ω–æ—ó –∞–≤—ñ–∞—Ü—ñ—ó. –í–∏–ª—ñ—Ç, –π–º–æ–≤—ñ—Ä–Ω–æ, –±–æ–π–æ–≤–∏–π.'); // –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ –≤–∑–ª—ñ—Ç –∞–≤—ñ–∞—Ü—ñ—ó
  alarmSound.play();

  for (let i = 0; i < count; i++) {
    setTimeout(() => {

      const startAerodrom = [1, 2];
      const randomAerodrom = Math.floor(Math.random() * startAerodrom.length);

      const initialFighterPos = AerodromMasive[randomAerodrom]; // Corrected to use randomAerodrom as index


      // === –ó–ú–Ü–ù–ê: –í–∏–ø–∞–¥–∫–æ–≤–∏–π –≤–∏–±—ñ—Ä –∑ —Ç—Ä—å–æ—Ö —Ç–æ—á–æ–∫ ===
      // –°—Ç–≤–æ—Ä—é—î–º–æ –º–∞—Å–∏–≤ –∑ —ñ–Ω–¥–µ–∫—Å–∞–º–∏ —Ç–∏—Ö —Ç–æ—á–æ–∫, —è–∫—ñ —Ö–æ—á–µ–º–æ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞—Ç–∏
      const availableMidpoints = [0, 1, 2]; // –Ü–Ω–¥–µ–∫—Å–∏ –¥–ª—è –°–∞—Ä–∞—Ç–æ–≤–∞, –†–æ—Å—Ç–æ–≤–∞, –í–æ—Ä–æ–Ω–µ–∂–∞
      // –í–∏–ø–∞–¥–∫–æ–≤–æ –æ–±–∏—Ä–∞—î–º–æ –æ–¥–∏–Ω —ñ–Ω–¥–µ–∫—Å –∑ —Ü—å–æ–≥–æ –º–∞—Å–∏–≤—É
      const randomIndex = Math.floor(Math.random() * availableMidpoints.length);
      const firstLegDestination = fighterMidpointLocations[availableMidpoints[randomIndex]];


      const fighterMarker = L.marker(initialFighterPos, { icon: icons.fighter }).addTo(map);
      fighterMarker.hp = 5; // –í–∏–Ω–∏—â—É–≤–∞—á –º–∞—î 5 HP

      const flightDuration = 15000; // 10 —Å–µ–∫—É–Ω–¥ –Ω–∞ –ø–æ–ª—ñ—Ç –¥–æ –ø—É—Å–∫—ñ–≤ –∑–æ–Ω–∏
      const returnFlightDuration = 15000; // 8 —Å–µ–∫—É–Ω–¥ –Ω–∞ –∑–≤–æ—Ä–æ—Ç–Ω–∏–π –ø–æ–ª—ñ—Ç
      let currentFlightStart = initialFighterPos;
      let currentFlightEnd = firstLegDestination;
      let currentDuration = flightDuration;
      let flyT = 0;
      let phase = 1; // 1 for outbound, 2 for return

      const fighterInterval = setInterval(() => {
        flyT++;
        const progress = flyT / (currentDuration / 20);

        const lat = currentFlightStart.lat + (currentFlightEnd.lat - currentFlightStart.lat) * progress;
        const lng = currentFlightStart.lng + (currentFlightEnd.lng - currentFlightStart.lng) * progress;
        const currentFighterPos = L.latLng(lat, lng);
        fighterMarker.setLatLng(currentFighterPos);

        // –û–±–µ—Ä—Ç–∞–Ω–Ω—è —ñ–∫–æ–Ω–∫–∏ –≤–∏–Ω–∏—â—É–≤–∞—á–∞
        const angle = Math.atan2(currentFlightEnd.lat - currentFighterPos.lat, currentFlightEnd.lng - currentFighterPos.lng) * 180 / Math.PI;
        const img = fighterMarker.getElement()?.querySelector('img');
        if (img) {
          img.style.transformOrigin = 'center';
          img.style.transform = `rotate(${angle + 90}deg)`;
        }

        if (flyT >= (currentDuration / 20)) {
          // If the fighter was destroyed by PVO, the interval would have been cleared.
          // So, if we reach here, it means the fighter completed its current leg of flight.
          if (map.hasLayer(fighterMarker)) { // If not destroyed by PVO during first leg
            if (phase === 1) { // First leg completed (flight to Rostov)
              clearInterval(fighterInterval); // Clear current interval
              showLaunchMessage(`–ë–æ–º–±–∞—Ä–¥—É–≤–∞–ª—å–Ω–∏–∫ ‚Ññ${i+1} –≤–∏–ø—É—Å—Ç–∏–≤ 5 —Ä–∞–∫–µ—Ç –∑ ${currentFlightEnd.lat.toFixed(2)}, ${currentFlightEnd.lng.toFixed(2)}!`);
              spawnMissileWave('fighter_missile', 5, currentFlightEnd, 1500); // 5 —Ä–∞–∫–µ—Ç –∑ –ø–æ–∑–∏—Ü—ñ—ó –†–æ—Å—Ç–æ–≤–∞ –∑ —ñ–Ω—Ç–µ—Ä–≤–∞–ª–æ–º 2 —Å–µ–∫—É–Ω–¥–∏

              // Start return flight
              phase = 2;
              currentFlightStart = currentFlightEnd;
              currentFlightEnd = initialFighterPos;
              currentDuration = returnFlightDuration;
              flyT = 0; // Reset flyT for the new leg

              // Start a new interval for the return journey
              const returnInterval = setInterval(() => {
                  flyT++;
                  const returnProgress = flyT / (currentDuration / 20);
                  const returnLat = currentFlightStart.lat + (currentFlightEnd.lat - currentFlightStart.lat) * returnProgress;
                  const returnLng = currentFlightStart.lng + (currentFlightEnd.lng - currentFlightStart.lng) * returnProgress;
                  const returnPos = L.latLng(returnLat, returnLng);
                  fighterMarker.setLatLng(returnPos);

                  // Update rotation for return flight
                  const returnAngle = Math.atan2(currentFlightEnd.lat - returnPos.lat, currentFlightEnd.lng - returnPos.lng) * 180 / Math.PI;
                  const returnImg = fighterMarker.getElement()?.querySelector('img');
                  if (returnImg) {
                      returnImg.style.transformOrigin = 'center';
                      returnImg.style.transform = `rotate(${returnAngle + 90}deg)`;
                  }

                  // PVO interaction during return flight (similar to above)
                  if (returnPos) {
                      // Fighters can be intercepted by either mobile or rocket PVOs
                      placedPVO.forEach(pvo => {
                          if (map.distance(pvo.latlng, returnPos) < pvo.currentRadius && isInsideUkraine(returnPos) && canFireFrom(pvo, pvo.currentCooldown)) { // –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ currentRadius —ñ currentCooldown
                              triggerPvoCooldown(pvo);
                              fighterMarker.hp--;

                              L.polyline([pvo.latlng, returnPos], {
                                  color: 'purple',
                                  weight: 3,
                                  dashArray: '4'
                              }).addTo(map);

                              setTimeout(() => map.eachLayer(layer => {
                                  if (layer instanceof L.Polyline && layer.options.color === 'purple') {
                                      map.removeLayer(layer);
                                  }
                              }), 300);

                              if (fighterMarker.hp <= 0 && map.hasLayer(fighterMarker)) {
                                  clearInterval(returnInterval);
                                  map.removeLayer(fighterMarker);
                                  showExplosionAnimation(returnPos);
                                  rewardCoin(20);
                                  intercepted++;
                                  updateGameUI();
                                  return;
                              }
                          }
                      });
                  }

                  if (flyT >= (currentDuration / 20)) {
                      clearInterval(returnInterval);
                      if (map.hasLayer(fighterMarker)) { // Remove only if not destroyed by PVO
                          map.removeLayer(fighterMarker); // Remove fighter after it returns to Saratov
                      }
                  }
              }, 20); // Interval for return flight animation
            }
          }
        }
      }, 20);
    }, i * 3000); // === –ó–ú–Ü–ù–ê: –ó–∞–ø—É—Å–∫–∞—î–º–æ –≤–∏–Ω–∏—â—É–≤–∞—á—ñ –∑ —ñ–Ω—Ç–µ—Ä–≤–∞–ª–æ–º 3 —Å–µ–∫—É–Ω–¥–∏ ===
  }
}

// --- NEW: Collapsible PVO Section Logic ---
const pvoHeader = document.getElementById('pvoHeader');
const pvoContent = document.getElementById('pvoContent');

if (pvoHeader && pvoContent) {
  pvoHeader.addEventListener('click', () => {
    pvoContent.classList.toggle('collapsed');
    pvoHeader.classList.toggle('collapsed'); // Toggle class on header for arrow rotation

    // If it's collapsing, scroll to the top of the controls div.
    // This helps keep the important info at the top visible.
    if (pvoContent.classList.contains('collapsed')) {
        document.querySelector('.controls').scrollTop = 0;
    }
  });
}


updateGameUI(); // –û–Ω–æ–≤–ª–µ–Ω–Ω—è UI –ø—Ä–∏ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—ñ
updateWaveTimer();
applyUpgradesToPVO(); // –ó–∞—Å—Ç–æ—Å—É–≤–∞—Ç–∏ –ø–æ–∫—Ä–∞—â–µ–Ω–Ω—è –ø—Ä–∏ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—ñ –≥—Ä–∏


// === –ü–ê–¢–ß: –æ–Ω–æ–≤–ª–µ–Ω–Ω—è —Ü—ñ–Ω —Ç–∞ –∫–æ–ª—å–æ—Ä—É ===

// === –û–Ω–æ–≤–ª–µ–Ω–∏–π —Å–∫—Ä–∏–ø—Ç –≥—Ä–∏ ===


// --- –î–æ–∑–≤—ñ–ª –Ω–∞ –∑–º—ñ–Ω—É –∫–æ–ª—å–æ—Ä—É –∫–æ–ª–∞ –ø—Ä–∏ –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ñ–π –ø—Ä–æ–∫–∞—á—Ü—ñ ---
function unlockColorChangeUIFor(pvoType) {
  const controlsContainer = document.querySelector('.controls');
  if (!document.getElementById(`color-change-${pvoType}`)) {
    const btn = document.createElement('button');
    btn.innerText = `üé® –ó–º—ñ–Ω–∏—Ç–∏ –∫–æ–ª—ñ—Ä —Ä–∞–¥—ñ—É—Å–∞ –¥–ª—è ${pvoType.toUpperCase()}`;
    btn.className = 'action-button';
    btn.id = `color-change-${pvoType}`;
    btn.onclick = () => {
      const color = prompt('–í–≤–µ–¥—ñ—Ç—å –∫–æ–ª—ñ—Ä —É —Ñ–æ—Ä–º–∞—Ç—ñ CSS (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥: red, blue, #00ff00):');
      if (!color) return;
      placedPVO.forEach(pvo => {
        if (pvo.type === pvoType && pvo.circle) {
          pvo.circle.setStyle({ color });
        }
      });
    };
    controlsContainer.appendChild(btn);
  }
}

// --- –û–Ω–æ–≤–ª–µ–Ω–∞ applyUpgradesToPVO –∑ –ø—ñ–¥—Ç—Ä–∏–º–∫–æ—é –≤—ñ–¥–∫—Ä–∏—Ç—Ç—è –∫–æ–ª—å–æ—Ä—É ---
function applyUpgradesToPVO() {
  placedPVO.forEach(pvo => {
    const originalSpec = pvoSpecs[pvo.type];
    const pvoUpgradeLevels = upgradeLevels[pvo.type];

    pvo.currentRadius = originalSpec.radius * (1 + pvoUpgradeLevels.radius * 0.1);
    if (pvo.circle) {
      pvo.circle.setRadius(pvo.currentRadius);
    }

    if (pvo.type !== 'reb') {
      pvo.currentCooldown = originalSpec.cooldown * (1 - pvoUpgradeLevels.efficiency * 0.05);
      if (pvo.currentCooldown < 50) pvo.currentCooldown = 50;
    } else {
      pvo.currentCooldown = 0;
    }

    pvo.radiusLevel = pvoUpgradeLevels.radius;
    pvo.efficiencyLevel = pvoUpgradeLevels.efficiency;

    // --- –£–º–æ–≤–∞: –ø—Ä–∏ –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ñ–π –ø—Ä–æ–∫–∞—á—Ü—ñ –¥–∞—Ç–∏ –∑–º—ñ–Ω—é–≤–∞—Ç–∏ –∫–æ–ª—ñ—Ä ---
    if (pvo.radiusLevel >= 3 && pvo.efficiencyLevel >= 3) {
      unlockColorChangeUIFor(pvo.type);
    }
  });
}
